require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ListsController do

  let(:not_user_list){ Factory.create(:other_user).lists.first }

  describe "GET index" do
    it "assigns all lists as @lists" do
      get :index
      assigns(:lists).should eq([not_user_list])
    end
  end

  describe "GET show" do
    it "assigns the requested list as @list" do
      get :show, :id => not_user_list.id
      assigns(:list).should eq(not_user_list)
    end
  end
  
  describe "POST follow" do
    before(:each) do
      @user = login_user
    end
    
    describe "with valid params" do
      it "new favorite" do
        expect {
          post :follow, :id => not_user_list.id
        }.to change(@user.favorites, :count).by(1)
      end
      
      it "redirects to the user favorites" do
        post :follow, :id => not_user_list.id
        response.should redirect_to(favorites_my_lists_url)
      end
    end

    describe "with invalid params" do
      it "render 404 page" do
        # Trigger the behavior that occurs when invalid params are submitted
        List.any_instance.stub(:save).and_return(false)
        post :follow, :id => -1
        response.status.should eql 404
      end
    end    
  end
  
  describe "POST unfollow" do
    before(:each) do
       @user = login_user
       @user.favorites << not_user_list
    end
      
    it "unfollow the requested list" do
      expect {
        post :unfollow, :id => not_user_list.id
      }.to change(@user.favorites, :count).by(-1)
    end

    it "redirects to the user favorites" do
      post :unfollow, :id => not_user_list.id
      response.should redirect_to(favorites_my_lists_url)
    end
    
    it "with invalid id" do
      post :unfollow, :id => -1
      response.status.should eql 404        
    end
  end
end
