require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe My::ListsController do

  # This should return the minimal set of attributes required to create a valid
  # List. As you add validations to List, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { :name => "My list" }
  end
  
  let(:not_user_list){ Factory.create(:other_user).lists.first }
  
  describe "GET index" do
    it "assigns all lists as @lists" do
      user = login_user
      get :index
      assigns(:lists).should eq(user.lists)
    end
  end

  describe "GET show" do
    it "assigns the requested list as @list" do
      login_user
      get :show, :id => not_user_list.id
      assigns(:list).should eq(not_user_list)
    end
  end

  describe "GET new" do
    it "assigns a new list as @list" do
      login_user
      get :new
      assigns(:list).should be_a_new(List)
    end
  end

  describe "GET edit" do    
    it "assigns the requested list as @list" do
      user = login_user
      list = user.lists.first
      get :edit, :id => list.id
      assigns(:list).should eq(list)
    end
  end

  describe "POST create" do
    before(:each) do
      @user = login_user
    end
    
    describe "with valid params" do
      it "creates a new List" do
        expect {
          post :create, :list => valid_attributes
        }.to change(List, :count).by(1)
      end

      it "assigns a newly created list as @list" do
        post :create, :list => valid_attributes
        assigns(:list).should be_a(List)
        assigns(:list).should be_persisted
      end

      it "redirects to the created list" do
        post :create, :list => valid_attributes
        response.should redirect_to(my_list_url(List.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved list as @list" do
        # Trigger the behavior that occurs when invalid params are submitted
        List.any_instance.stub(:save).and_return(false)
        post :create, :list => {}
        assigns(:list).should be_a_new(List)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        List.stub(:save).and_return(false)
        post :create, :list => {}
        response.should render_template("new")
      end
    end    
  end

  describe "PUT update" do
    before(:each) do
      @user = login_user
    end
      
    describe "with valid params" do
      it "updates the requested list" do
        list = @user.lists.first
        # Assuming there are no other lists in the database, this
        # specifies that the List created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        List.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => list.id, :list => {'these' => 'params'}
      end

      it "assigns the requested list as @list" do
        list = @user.lists.first
        put :update, :id => list.id, :list => valid_attributes
        assigns(:list).should eq(list)
      end

      it "redirects to the list" do
        list = @user.lists.first
        put :update, :id => list.id, :list => valid_attributes
        response.should redirect_to(my_list_path(list))
      end
    end

    describe "with invalid params" do
      it "assigns the list as @list" do
        list = @user.lists.first
        # Trigger the behavior that occurs when invalid params are submitted
        List.any_instance.stub(:save).and_return(false)
        put :update, :id => list.id, :list => {}
        assigns(:list).should eq(list)
      end

      it "re-renders the 'edit' template" do
        list = @user.lists.first
        # Trigger the behavior that occurs when invalid params are submitted
        List.any_instance.stub(:update).and_return(false)
        put :update, :id => list.id, :list => { :name => '' }
        response.should render_template("edit")
      end
      
      it "only the owner can edit" do
        list = not_user_list
        put :update, :id => list.id, :list => valid_attributes
        response.status.should eql 404        
      end
    end
  end

  describe "DELETE destroy" do
    before(:each) do
       @user = login_user
    end
      
    it "destroys the requested list" do
      list = @user.lists.first
      expect {
        delete :destroy, :id => list.id
      }.to change(List, :count).by(-1)
    end

    it "redirects to the lists list" do
      list = @user.lists.first
      delete :destroy, :id => list.id
      response.should redirect_to(my_lists_url)
    end
    
    it "only the owner can destroy" do
      list = not_user_list
      delete :destroy, :id => list.id
      response.status.should eql 404        
    end
  end

end
